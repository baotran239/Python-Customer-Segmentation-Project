# -*- coding: utf-8 -*-
"""2.Python code file.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rJoVgsXphJIOR4JYm01K9VhDwzXMKU3b
"""

from google.colab import files


uploaded = files.upload()

import pandas as pd
import io

df = pd.read_excel(io.BytesIO(uploaded['ecommerce retail.xlsx']))
df

Segmentation = pd.read_excel(io.BytesIO(uploaded['ecommerce retail.xlsx']), sheet_name = 'Segmentation')

#Thông tin các cột trong bảng
df.info()

#Tóm tắt thống kê của các cột trong bảng
df.describe()

#Loại bỏ các giá trị NaN trong cột CustomerID
df = df.dropna(subset=['CustomerID'])

#Chuyển đổi data type của CustomerID thành số nguyên
df['CustomerID'] = df['CustomerID'].astype(int)

#Lọc data
df1 = df[(df['Quantity'] > 0) & (df['UnitPrice'] > 0) & (df['Country'] == 'United Kingdom')]

# Chuyển đổi cột InvoiceNo sang kiểu chuỗi
df1['InvoiceNo'] = df1['InvoiceNo'].astype(str)

# Lọc các hàng mà InvoiceNo không bắt đầu bằng 'C'
df2 = df1[~df1['InvoiceNo'].str.startswith('C')]

#Tính total price của từng transaction
df2['Total Price'] = df2['UnitPrice'] * df2['Quantity']

df2

#Tạo bảng mới group by từng CustomerID
grouped_df2 = df2.groupby('CustomerID').agg(
                                            RecentInvoiceDate=('InvoiceDate', 'max'),
                                            Frequency = ('CustomerID', 'count'),
                                            MonetaryValue = ('Total Price', 'sum')
                                            )

#Tính số ngày từ lần mua gần nhất theo CustomerID
grouped_df2['Recency'] = (df2['InvoiceDate'].max() - grouped_df2['RecentInvoiceDate']).dt.days

grouped_df2

#Scoring
grouped_df2['recency_qcut'] = pd.qcut(grouped_df2['Recency'], q=5, labels=False)
grouped_df2['recency_rate'] = grouped_df2['recency_qcut'] + 1

grouped_df2['frequency_qcut'] = pd.qcut(grouped_df2['Frequency'], q=5, labels=False)
grouped_df2['frequency_rate'] = grouped_df2['frequency_qcut'] + 1

grouped_df2['monetary_qcut'] = pd.qcut(grouped_df2['MonetaryValue'], q=5, labels=False)
grouped_df2['monetary_rate'] = grouped_df2['monetary_qcut'] + 1

#Ghép 3 chỉ số đã scoring lại
grouped_df2['RFM_score'] = grouped_df2['recency_rate'].astype(str) + grouped_df2['frequency_rate'].astype(str) + grouped_df2['monetary_rate'].astype(str)

grouped_df2

import matplotlib.pyplot as plt

# Đếm số lần xuất hiện của mỗi giá trị trong cột 'RFM_score'
rfm_counts = grouped_df2['RFM_score'].value_counts()

# Biểu diễn số lượng các giá trị của cột 'RFM_score' dưới dạng biểu đồ cột
plt.figure(figsize=(10, 6))
plt.bar(rfm_counts.index, rfm_counts.values, color='skyblue', edgecolor='black')
plt.xlabel('RFM Score')
plt.ylabel('Frequency')
plt.title('Frequency of RFM Score')
plt.grid(True)
plt.xticks(rotation=90, fontsize=5, fontweight='bold')
plt.show()

#Tạo bảng để thống kê frequency của RFM_score
rfm_frequency = grouped_df2['RFM_score'].value_counts().reset_index()

rfm_frequency.columns = ['RFM_score', 'Frequency of RFM_score']

rfm_frequency

Segmentation

# Tách RFM Score của bảng Segmentation thành từng dòng
Segmentation['RFM Score'] = Segmentation['RFM Score'].str.split(', ')
Segmentation = Segmentation.explode('RFM Score')

Segmentation

Segmentation['RFM Score'] = Segmentation['RFM Score'].str.split(',')
Segmentation = Segmentation.explode('RFM Score')

Segmentation

# Join bảng grouped_df2 và Segmentation
merged_df = pd.merge(grouped_df2, Segmentation, left_on='RFM_score', right_on='RFM Score', how='left')

merged_df

import seaborn as sns
sns.countplot(x='Segment', data = merged_df)
plt.xticks(rotation=90)
plt.ylabel('distribution')
plt.title('Distribution of 11 customer groups')
plt.show()

sns.distplot(merged_df['Recency'])
plt.xlabel('recency (days)')
plt.ylabel('distribution')
plt.title('Distribution of recency')
plt.show()

sns.distplot(merged_df['Frequency'])
plt.xlabel('frequency (times)')
plt.ylabel('distribution')
plt.title('Distribution of frequency')
plt.show()

sns.distplot(merged_df['MonetaryValue'])
plt.xlabel('monetary value ($)')
plt.ylabel('distribution')
plt.title('Distribution of monetary value')
plt.show()

